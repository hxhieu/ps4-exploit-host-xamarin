using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using PS4ExploitHost.Common.Interfaces;
using PS4ExploitHost.Droid.Platforms;
using Xamarin.Forms;

[assembly: Dependency(typeof(FileSystem_Droid))]
namespace PS4ExploitHost.Droid.Platforms
{
    public class FileSystem_Droid : IFileSystem
    {
        static readonly Regex FirmwareNumberRegex = new Regex("^(\\d+\\.)?(\\d+\\.)?(\\*|\\d+)$");

        string DataPath => Path.Combine(Android.OS.Environment.ExternalStorageDirectory.AbsolutePath, AppSettings.DataFolder);

        string[] GetFirmwareFolders(string path)
        {
            var dirs = GetFolderNames(path);
            return dirs.Where(x => FirmwareNumberRegex.IsMatch(x)).ToArray();
        }

        string[] GetFolderNames(string path)
        {
            return Directory.GetDirectories(path).Select(x => new DirectoryInfo(x).Name).ToArray();
        }

        public void EnsureDataFolder(string name = "ps4-exploit-host")
        {
            AppSettings.DataFolder = name;

            if (!Directory.Exists(DataPath))
            {
                Directory.CreateDirectory(DataPath);
            }

            var explPath = Path.Combine(DataPath, Common.Constants.WorkingFolder.Exploits);
            if (!Directory.Exists(explPath))
            {
                Directory.CreateDirectory(explPath);
            }

            var payloadsPath = Path.Combine(DataPath, Common.Constants.WorkingFolder.Payloads);
            if (!Directory.Exists(payloadsPath))
            {
                Directory.CreateDirectory(payloadsPath);
            }
        }

        public string[] GetExploitFirmwares()
        {
            return GetFirmwareFolders(Path.Combine(DataPath, Common.Constants.WorkingFolder.Exploits));
        }

        public string[] GetPayloadFirmwares()
        {
            return GetFirmwareFolders(Path.Combine(DataPath, Common.Constants.WorkingFolder.Payloads));
        }

        public string[] GetExploits(string firmware)
        {
            var path = Path.Combine(DataPath, Common.Constants.WorkingFolder.Exploits, firmware);
            return Directory.Exists(path) ? GetFolderNames(path) : null;
        }

        public string[] GetPayloads(string firmware)
        {
            var path = Path.Combine(DataPath, Common.Constants.WorkingFolder.Payloads, firmware);
            return Directory.Exists(path) ? Directory.GetFiles(path).Select(x => new FileInfo(x).Name).ToArray() : null;
        }

        public string GetExploitPath(string firmware, string name)
        {
            var path = Path.Combine(DataPath, Common.Constants.WorkingFolder.Exploits, firmware, name);
            return Directory.Exists(path) ? path : null;
        }

        public string GetExploitServePath()
        {
            var path = Path.Combine(DataPath, Common.Constants.WorkingFolder.Serve);
            if (!Directory.Exists(path)) Directory.CreateDirectory(path);
            return path;
        }
    }
}
