using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using DNS.Server;
using PS4ExploitHost.Common.Interfaces;
using PS4ExploitHost.Controllers;
using Unosquare.Labs.EmbedIO;
using Unosquare.Labs.EmbedIO.Constants;
using Unosquare.Labs.EmbedIO.Modules;
using Xamarin.Forms;

namespace PS4ExploitHost
{
    public partial class App : Application
    {
        public App()
        {
            InitializeComponent();

            MainPage = new PS4ExploitHost.MainPage();
        }

        private WebServer server;

        protected override void OnStart()
        {
            var fileSystem = DependencyService.Get<IFileSystem>();
            fileSystem.EnsureDataFolder();

            // Our web server is disposable. Note that if you don't want to use logging,
            // there are alternate constructors that allow you to skip specifying an ILog object.
            server = new WebServer(8010, RoutingStrategy.Regex);
            // First, we will configure our web server by adding Modules.
            // Please note that order DOES matter.
            // ================================================================================================
            // If we want to enable sessions, we simply register the LocalSessionModule
            // Beware that this is an in-memory session storage mechanism so, avoid storing very large objects.
            // You can use the server.GetSession() method to get the SessionInfo object and manupulate it.
            // You could potentially implement a distributed session module using something like Redis
            //server.RegisterModule(new LocalSessionModule());

            // Here we setup serving of static files
            server.RegisterModule(new StaticFilesModule(fileSystem.GetExploitServePath()));
            // The static files module will cache small files in ram until it detects they have been modified.
            server.Module<StaticFilesModule>().UseRamCache = true;
            server.Module<StaticFilesModule>().DefaultExtension = ".html";
            // We don't need to add the line below. The default document is always index.html.
            //server.Module<Modules.StaticFilesWebModule>().DefaultDocument = "index.html";

            //server.Module<WebApiModule>().RegisterController<ExploitsController>();
            server.WithWebApiController<ExploitsController>();

            // Once we've registered our modules and configured them, we call the RunAsync() method.
            // This is a non-blocking method (it return immediately) so in this case we avoid
            // disposing of the object until a key is pressed.
            //server.Run();
            server.RunAsync();

            // Wait for any key to be pressed before disposing of our web server.
            // In a service we'd manage the lifecycle of of our web server using
            // something like a BackgroundWorker or a ManualResetEvent.
            //Console.ReadKey(true);

            MasterFile masterFile = new MasterFile();
            DnsServer dns = new DnsServer(masterFile, "8.8.8.8", 8020);

            masterFile.AddIPAddressResourceRecord("google.com", "127.0.0.1");
            masterFile.AddIPAddressResourceRecord("github.com", "127.0.0.1");

            dns.Listen();
        }

        protected override void OnSleep()
        {
            // Handle when your app sleeps
        }

        protected override void OnResume()
        {
            // Handle when your app resumes
        }
    }
}
