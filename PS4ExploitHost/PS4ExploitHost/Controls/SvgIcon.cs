using System.Windows.Input;
using PS4ExploitHost.Common.Interfaces;
using SkiaSharp;
using SkiaSharp.Views.Forms;
using Xamarin.Forms;
using static PS4ExploitHost.Common.Constants;
using Svg = SkiaSharp.Extended.Svg.SKSvg;

namespace PS4ExploitHost.Controls
{
    public class SvgIcon : Frame
    {
        readonly SKCanvasView _canvasView = new SKCanvasView
        {
            IgnorePixelScaling = true
        };

        readonly IAssetLoader _assetLoader;

        static readonly TapGestureRecognizer _tapGesture = new TapGestureRecognizer();

        public static readonly BindableProperty TapCommandProperty = BindableProperty.Create(
            nameof(TapCommand),
            typeof(ICommand),
            typeof(SvgIcon),
            null,
            propertyChanged: UpdateTapCommand);

        public ICommand TapCommand
        {
            get => (ICommand)GetValue(TapCommandProperty);
            set => SetValue(TapCommandProperty, value);
        }

        public static readonly BindableProperty IconNameProperty = BindableProperty.Create(
            nameof(IconName),
            typeof(string),
            typeof(SvgIcon),
            default(string),
            propertyChanged: RedrawCanvas);

        public string IconName
        {
            get => (string)GetValue(IconNameProperty);
            set => SetValue(IconNameProperty, value);
        }

        public static readonly BindableProperty IconColourProperty = BindableProperty.Create(
            nameof(IconColour),
           typeof(Color),
           typeof(SvgIcon),
           Color.White,
           propertyChanged: RedrawCanvas);

        public Color IconColour
        {
            get => (Color)GetValue(IconColourProperty);
            set => SetValue(IconColourProperty, value);
        }

        static void RedrawCanvas(BindableObject bindable, object oldvalue, object newvalue)
        {
            var icon = bindable as SvgIcon;
            icon?._canvasView.InvalidateSurface();
        }

        static void UpdateTapCommand(BindableObject bindable, object oldValue, object newValue)
        {
            var icon = bindable as SvgIcon;
            if (icon.TapCommand != null)
            {
                _tapGesture.Command = icon.TapCommand;
            }
        }

        public SvgIcon()
        {
            _assetLoader = DependencyService.Get<IAssetLoader>();

            Padding = new Thickness(0);
            HasShadow = false;
            BackgroundColor = Color.Transparent;
            WidthRequest = HeightRequest = 60;

            GestureRecognizers.Add(_tapGesture);
            Content = _canvasView;
            _canvasView.PaintSurface += CanvasViewOnPaintSurface;
        }

        void CanvasViewOnPaintSurface(object sender, SKPaintSurfaceEventArgs args)
        {
            var canvas = args.Surface.Canvas;
            canvas.Clear();

            if (string.IsNullOrEmpty(IconName))
                return;

            using (var stream = _assetLoader.Load(AssetType.Svgs, IconName))
            {
                var svg = new Svg();
                svg.Load(stream);

                using (var paint = new SKPaint())
                {
                    var matrix = SKMatrix.MakeScale((float)WidthRequest / svg.CanvasSize.Width, (float)HeightRequest / svg.CanvasSize.Height);
                    paint.ColorFilter = SKColorFilter.CreateBlendMode(IconColour.ToSKColor(), SKBlendMode.SrcIn);
                    canvas.DrawPicture(svg.Picture, ref matrix, paint);
                }
            }
        }
    }
}

