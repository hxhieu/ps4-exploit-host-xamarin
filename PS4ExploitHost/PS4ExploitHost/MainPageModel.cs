using System.ComponentModel;
using System.IO;
using System.Windows.Input;
using PS4ExploitHost.Common.Interfaces;
using PS4ExploitHost.Common.MessageTypes;
using PS4ExploitHost.Controllers;
using Unosquare.Labs.EmbedIO;
using Unosquare.Labs.EmbedIO.Constants;
using Unosquare.Labs.EmbedIO.Modules;
using Xamarin.Forms;
using static PS4ExploitHost.Common.Constants;

namespace PS4ExploitHost
{
    public class MainPageModel : FreshMvvm.FreshBasePageModel, INotifyPropertyChanged
    {
        readonly IFileSystem _fileSystem;
        readonly IPlatformTools _platformTools;
        WebServer _webServer;

        public ICommand ButtonCommand { get; set; }

        Color _buttonColor;
        public Color ButtonColor
        {
            get => _buttonColor;
            set
            {
                _buttonColor = value;
                RaisePropertyChanged();
            }
        }

        string _statusText;
        public string StatusText
        {
            get => _statusText;
            set
            {
                _statusText = value;
                RaisePropertyChanged();
            }
        }

        string _ipText;
        public string IpText
        {
            get => _ipText;
            set
            {
                _ipText = value;
                RaisePropertyChanged();
            }
        }

        const string IdleColour = "#666666";
        const string ActiveColour = "#00ff10";
        const string IdleText = "N/A";
        const string ActiveText = "RUNNING";

        public MainPageModel()
        {

            _fileSystem = DependencyService.Get<IFileSystem>();
            _platformTools = DependencyService.Get<IPlatformTools>();

            ButtonColor = Color.FromHex(IdleColour);
            StatusText = IpText = IdleText;


            ButtonCommand = new Command(() =>
           {
               if (_webServer == null)
               {
                   _webServer = CreateWebServer();
                   _webServer.RunAsync();
                   ButtonColor = Color.FromHex(ActiveColour);
                   StatusText = ActiveText;
                   IpText = $"{_platformTools.GetIPAddress()}:{WebServerPort}";
                   MessagingCenter.Send(new GenericMessage(), MessageNames.WebServerStart);
               }
               else
               {
                   _webServer.Dispose();
                   _webServer = null;
                   ButtonColor = Color.FromHex(IdleColour);
                   StatusText = IpText = IdleText;
                   MessagingCenter.Send(new GenericMessage(), MessageNames.WebServerStop);
               }
           });
        }

        WebServer CreateWebServer()
        {
            // Our web server is disposable. Note that if you don't want to use logging,
            // there are alternate constructors that allow you to skip specifying an ILog object.
            var server = new WebServer(WebServerPort, RoutingStrategy.Regex);
            // First, we will configure our web server by adding Modules.
            // Please note that order DOES matter.
            // ================================================================================================
            // If we want to enable sessions, we simply register the LocalSessionModule
            // Beware that this is an in-memory session storage mechanism so, avoid storing very large objects.
            // You can use the server.GetSession() method to get the SessionInfo object and manupulate it.
            // You could potentially implement a distributed session module using something like Redis
            //server.RegisterModule(new LocalSessionModule());

            // Here we setup serving of static files
            server.RegisterModule(new StaticFilesModule(Path.Combine(_fileSystem.DataPath, WorkingFolder.Serve)));
            // The static files module will cache small files in ram until it detects they have been modified.
            server.Module<StaticFilesModule>().UseRamCache = true;
            server.Module<StaticFilesModule>().DefaultExtension = ".html";
            // We don't need to add the line below. The default document is always index.html.
            //server.Module<Modules.StaticFilesWebModule>().DefaultDocument = "index.html";

            server.WithWebApiController<ExploitsController>();

            return server;
        }
    }
}
