using System;
using System.IO;
using System.Net;
using System.Threading.Tasks;
using PS4ExploitHost.HttpServer;
using Unosquare.Labs.EmbedIO;
using Unosquare.Labs.EmbedIO.Constants;
using Unosquare.Labs.EmbedIO.Modules;

namespace PS4ExploitHost.Controllers
{
    public class ExploitsController : ControllerBase
    {
        readonly HtmlGenerator _generator;

        public ExploitsController()
        {
            _generator = new HtmlGenerator(FileSystem);
        }
        /// <summary>
        /// Index the specified server and context.
        /// </summary>
        /// <returns>The index.</returns>
        /// <param name="server">Server.</param>
        /// <param name="context">Context.</param>
        [WebApiHandler(HttpVerbs.Get, new string[] { "/exploits$" })]
        public async Task<bool> Index(WebServer server, HttpListenerContext context)
        {
            try
            {
                return await context.HtmlResponseAsync(_generator.GetExploitHome());
            }
            catch (Exception ex)
            {
                return await context.InternalServerError(ex);
            }
        }


        /// <summary>
        /// Exploits the specified server, context and firmware.
        /// </summary>
        /// <returns>The exploits.</returns>
        /// <param name="server">Server.</param>
        /// <param name="context">Context.</param>
        /// <param name="firmware">Firmware.</param>
        [WebApiHandler(HttpVerbs.Get, new string[] { "/exploits/firmware/{firmware}/$" })]
        public async Task<bool> Exploits(WebServer server, HttpListenerContext context, string firmware)
        {
            try
            {
                firmware = firmware.TrimEnd('/');
                return await context.HtmlResponseAsync(_generator.GetFirmwareExploits(firmware));
            }
            catch (Exception ex)
            {
                return await context.InternalServerError(ex);
            }
        }

        /// <summary>
        /// Serve the specified server, context, firmware and exploit.
        /// </summary>
        /// <returns>The serve.</returns>
        /// <param name="server">Server.</param>
        /// <param name="context">Context.</param>
        /// <param name="firmware">Firmware.</param>
        /// <param name="exploit">Exploit.</param>
        [WebApiHandler(HttpVerbs.Get, new string[] { "/exploits/serve/{firmware}/{exploit}/$" })]
        public async Task<bool> Serve(WebServer server, HttpListenerContext context, string firmware, string exploit)
        {
            try
            {
                var servePath = FileSystem.GetExploitServePath();
                var explPath = FileSystem.GetExploitPath(firmware, exploit);

                if (explPath == null) throw new Exception($"Invalid exploit of {firmware}/{exploit}");

                foreach (var file in Directory.GetFiles(explPath))
                {
                    var fileName = new FileInfo(file).Name;
                    File.Copy(file, Path.Combine(servePath, fileName), true);
                }

                return context.Redirect("/");
            }
            catch (Exception ex)
            {
                return await context.InternalServerError(ex);
            }
        }
    }
}
