using System.Text;
using PS4ExploitHost.Common.Interfaces;

namespace PS4ExploitHost.HttpServer
{
    public class HtmlGenerator
    {
        readonly IFileSystem _fileSystem;

        public HtmlGenerator(IFileSystem fileSystem)
        {
            _fileSystem = fileSystem;
        }

        StringBuilder GetBuilder(){
            var builder = new StringBuilder();
            builder.SetTitle();
            builder.AppendStyles();
            return builder;
        }

        public string GetExploitHome()
        {
            var builder = GetBuilder();
            builder.AppendLine("<div id='exploits-home' class='clearfix'>");

            var firmwares = _fileSystem.GetExploitFirmwares();
            foreach (var firmware in firmwares)
            {
                var url = $"/exploits/firmware/{firmware}/";
                builder.AppendLine($"  <a href='{url}' class='btn pull-left'>{firmware}</a>");
            }

            builder.AppendBackButton();
            builder.AppendLine("</div>");
            return builder.ToString();
        }

        public string GetFirmwareExploits(string firmware)
        {
            var builder = GetBuilder();
            builder.AppendLine("<div id='exploits' class='clearfix'>");

            var exploits = _fileSystem.GetExploits(firmware);
            if (exploits == null)
            {
                builder.AppendLine($"  <div class='no-records'>No exploits found for firmware <strong>{firmware}</strong> on your phone storage.</div>");
            }
            else
            {
                foreach (var expl in exploits)
                {
                    var url = $"/exploits/serve/{firmware}/{expl}/";
                    builder.AppendLine($"  <a href='{url}' class='btn pull-left'>{expl}</a>");
                }
            }

            builder.AppendBackButton();
            builder.AppendLine("</div>");
            return builder.ToString();
        }
    }
}
